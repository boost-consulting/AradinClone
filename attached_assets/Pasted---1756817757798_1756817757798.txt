お願い：下記の全項目を実装し、最後の受け入れ確認の全チェックに実操作で合格してから完了報告してください。部分対応の中間報告は不要です。代替案がある場合も、全体整合が取れる形で提案し、受け入れ確認を全合格させてください。

指示（総点検・最終修正）
目的

作業モードの切替復旧（UIとサーバセッションの同期を厳密化）。

倉庫モードで出荷処理を確実に実行可能にする。

未処理仕入予定が常に0にならないよう、ダミー予定の種まき＋在庫低下時の自動作成を安定稼働させる。

ダッシュボード／入出庫／通知／履歴が一貫して連動する。

A. 作業モードの切替を“単一の真実”で復旧
A-1. セッション切替APIを唯一の真実にする

POST /api/auth/switch（既存のは使用継続または新規実装）

入力：{ mode:'warehouse' } または { mode:'store', storeId:number }

挙動：サーバセッションの role / storeId を上書きし、{ role, storeId } を返却。

必須事項：Cookie セッションを使う場合、credentials:'include' をフロントの fetch に付け、CORS/同一サイト属性は **sameSite:'lax' / secure:true（本番）**を設定。

GET /api/auth/me

返却：{ role, storeId, userId }（セッションの現在値）。

目的：アプリ初期化時とモード切替直後の再同期に使う。

A-2. フロントの切替フロー固定化

ヘッダーの「作業モード」選択時は、必ず

/api/auth/switch を await、

/api/auth/me を即取得して role/storeId をサーバ基準で確定、

以下のクエリを invalidate→再取得：
['/api/dashboard'], ['/api/shipping/pending'], ['/api/inbounds/pending'], ['/api/inventory'], 通知、右サイド履歴。

画面上の活性/非活性は workMode.mode ではなく /api/auth/me の role を最終基準にする（ねじれ防止）。

切替処理中は一時的に全アクションを非活性＋スピナー表示（誤操作防止）。

A-3. 可視化（デバッグ兼ねる）

ヘッダー右上のバッジに 作業モード：倉庫｜店舗n を表示すると同時に、サーバ応答の role / storeId を小さく併記（例：role=WAREHOUSE）。

これがUIのモードと一致していなければ即バグと判断できる。

B. 倉庫モードで出荷処理できない問題の根絶
B-1. 能力判定の一本化

共通 ability を1か所で定義し、画面全体が同じロジックで活性/非活性を決める：

role==='WAREHOUSE' → canConfirmShipment=true（出荷確定OK）

role==='STORE' → canCreateShipRequest=true（出荷指示作成OK）

入出庫ページ上段左パネルの「出荷処理」ボタン、下段[出荷処理]タブの「確定」ボタンともに同じ abilityを参照。

B-2. サーバ側ガードの確認

POST /shipping/confirm は WAREHOUSE のみを許可（403で弾く）。

/api/auth/me の role が WAREHOUSE のとき、確定処理が必ず成功することを実機で確認。

B-3. 行→フォームのプリセット保証

上段左パネルの行「出荷処理」を押下 → 下段[出荷処理] を自動選択し、店舗/SKU/数量を必ずフォームへプリセット。

プリセット値はそのまま POST /shipping/confirm に使われる（ID/数量の食い違いをなくす）。

C. 未処理仕入予定：ダミー種まき＋自動生成を安定化
C-1. ダミー予定の種まき（シード）

inbound_plans にデモ用の予定を初期投入：

件数：本日5件、+1日後5件、+3日後5件（合計15件）

内容：SKUは上位5〜10品目を循環、planned_qty は各10点、received_qty=0、status='pending'、supplier='デフォルト仕入先'

冪等性：同一データが既に存在する場合は重複作成しない（idempotent）

C-2. 自動補充予定（在庫低下トリガ）

API：POST /api/inbounds/replenish?date=today（既存流用でOK）

倉庫通常在庫が replenishment_criteria.target を下回るSKUで、pending/partially_received の plan が存在しない場合のみ、今日の予定を新規作成。

planned_qty = max(0, target - current_stock)、supplier='デフォルト仕入先'、status='pending'。

自動トリガ：以下の書込み成功直後に必ず呼ぶ → ['/api/inbounds/pending'] と ['/api/dashboard'] を invalidate：

倉庫での出荷確定

（必要なら）販売や返品検品で倉庫在庫が減るケース

右パネルに**「不足分の仕入予定を自動作成」**の手動ボタン（倉庫のみ表示）も残して良い。

C-3. “母数＝右パネル”の完全一致

ダッシュボード「本日の仕入受入（処理済／予定）」の予定は、
inbound_plans.status in ('pending','partially_received') AND due_date=今日 の件数。

入出庫右パネル GET /api/inbounds/pending?range=today は同じWHERE句を使用（共通関数化）。

カードクリックで入出庫へ遷移したとき、右パネルが range=today で同じ件数を表示すること。

D. 連動・再取得・排他

書込み後（出荷確定／受入登録／自動補充生成など）は最低下記をinvalidate→再取得：
['/api/dashboard'], ['/api/shipping/pending'], ['/api/inbounds/pending'], ['/api/inventory'], 通知, 右サイド履歴。

少数アラート⇔処理中の出荷指示は排他：SKU×店舗に pending があればアラートに出さない（shipping/shortage のSQLでLEFT JOIN除外）。

E. エラーハンドリングと見える化

モード切替失敗：トーストに モード切替に失敗（ネットワーク/セッション） と詳細（HTTPコード）を表示。

実行不可の理由：非活性ボタンには鍵アイコン＋ツールチップ（例：倉庫モードでのみ出荷確定できます）。

右上のモードバッジ横に現在の server role/storeId を小さく表示（開発時のみでも可）。

右パネルが0件の時は空状態（「本日分はありません」リンクで range=7d に切替）を明示。

F. 受け入れ確認（完了前に必ず実操作で全○）

モード切替復旧

ヘッダーで 倉庫 を選択 → /api/auth/switch → /api/auth/me で role=WAREHOUSE になり、バッジ表示と一致。

すべての主要クエリが再取得され、UIの活性/非活性が切替る。

倉庫モードで出荷確定できる

入出庫上段左の行→「出荷処理」→下段[出荷処理]にプリセット→確定成功（403なし）。

店舗モードでは同ボタンが非活性。

“本日の仕入受入（予定）”と右パネルの完全一致

ダッシュボードの予定件数＝入出庫右パネル（range=today）の合計件数。

カードクリックで入出庫に遷移すると同じリストが表示される。

ダミー予定が初期から存在

リフレッシュ直後でも、右パネルrange=todayに本日分の未処理仕入予定が5件表示される（シードの成果）。

在庫低下→自動補充の発火

出荷確定で倉庫在庫を下げると、自動で /api/inbounds/replenish が実行され、
右パネルとダッシュボードの予定件数が増加（再取得済）。

右パネルの手動ボタンでも同様の結果が得られる（倉庫のみ表示）。

排他ルールの維持

pending の出荷指示があるSKU×店舗は、少数アラートに表示されない。

出荷確定で不足が解消されたSKUはアラートから消える。

実装を軽く・堅牢にするコツ

“単一の真実”は常にサーバ：UIのモード表示や能力判定は /api/auth/me の結果で決める。

react-query キーに role/storeId/range を含め、切替時の取り違いを防止。

replenish は冪等（同SKUに未処理があれば作らない）。

タイムゾーンはサーバとUIで固定（例：Asia/Tokyo）し、due_date=今日 の判定ぶれを防ぐ。

以上です。
作業モードの復旧・倉庫での出荷確定・未処理仕入予定の安定表示と自動生成までを一気通貫で直してください。